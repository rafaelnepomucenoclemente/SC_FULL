// SvrTester.cpp : 응용 프로그램에 대한 클래스 동작을 정의합니다.
//

#include "stdafx.h"
#include "SvrTester.h"
#include "MainFrm.h"

#include "TSessionDoc.h"
#include "TMacroDoc.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CSvrTesterApp

BEGIN_MESSAGE_MAP(CSvrTesterApp, CWinApp)
	ON_COMMAND(ID_APP_ABOUT, OnAppAbout)
	// 표준 파일을 기초로 하는 문서 명령입니다.
	ON_COMMAND(ID_FILE_NEW, CWinApp::OnFileNew)
	ON_COMMAND(ID_FILE_OPEN, CWinApp::OnFileOpen)
END_MESSAGE_MAP()


// CSvrTesterApp 생성

CSvrTesterApp::CSvrTesterApp()
{
	// TODO: 여기에 생성 코드를 추가합니다.
	// InitInstance에 모든 중요한 초기화 작업을 배치합니다.
}

CSvrTesterApp::~CSvrTesterApp()
{
	m_mapDocTemp.clear();
}



// 유일한 CSvrTesterApp 개체입니다.

CSvrTesterApp theApp;

// CSvrTesterApp 초기화

BOOL CSvrTesterApp::InitInstance()
{
	// 응용 프로그램 매니페스트가 ComCtl32.dll 버전 6 이상을 사용하여 비주얼 스타일을
	// 사용하도록 지정하는 경우, Windows XP 상에서 반드시 InitCommonControls()가 필요합니다. 
	// InitCommonControls()를 사용하지 않으면 창을 만들 수 없습니다.
	InitCommonControls();

	CWinApp::InitInstance();

	// OLE 라이브러리를 초기화합니다.
	if (!AfxOleInit())
	{
		AfxMessageBox(IDP_OLE_INIT_FAILED);
		return FALSE;
	}
	AfxEnableControlContainer();
	// 표준 초기화
	// 이들 기능을 사용하지 않고 최종 실행 파일의 크기를 줄이려면
	// 아래에서 필요 없는 특정 초기화 루틴을 제거해야 합니다.
	// 해당 설정이 저장된 레지스트리 키를 변경하십시오.
	// TODO: 이 문자열을 회사 또는 조직의 이름과 같은
	// 적절한 내용으로 수정해야 합니다.
	SetRegistryKey(_T("로컬 응용 프로그램 마법사에서 생성된 응용 프로그램"));
	LoadStdProfileSettings(4);  // MRU를 포함하여 표준 INI 파일 옵션을 로드합니다.
	// 응용 프로그램의 문서 템플릿을 등록합니다. 문서 템플릿은
	// 문서, 프레임 창 및 뷰 사이의 연결 역할을 합니다.

	//////////////////////////////////////////////////////////////////////////////////
	CMultiDocTemplate* pDocTemplate1;
	pDocTemplate1 = new CMultiDocTemplate(IDR_SvrTesterTYPE,
		RUNTIME_CLASS(CTSessionDoc),
		RUNTIME_CLASS(CTSessionFrm), // 사용자 지정 MDI 자식 프레임입니다.
		RUNTIME_CLASS(CTSessionView));
	if (!pDocTemplate1)
		return FALSE;
	AddDocTemplate(pDocTemplate1);

	// m_mapView에 저장
	m_mapDocTemp.insert(MAPDOCTEMP::value_type(TSESSION, pDocTemplate1)); 

	CMultiDocTemplate* pDocTemplate2;
	pDocTemplate2 = new CMultiDocTemplate(IDR_SvrTesterTYPE,
		RUNTIME_CLASS(CTMacroDoc),
		RUNTIME_CLASS(CTMacroFrm), // 사용자 지정 MDI 자식 프레임입니다.
		RUNTIME_CLASS(CTMacroView));
	if (!pDocTemplate2)
		return FALSE;
	AddDocTemplate(pDocTemplate2);

	// m_mapView에 저장
	m_mapDocTemp.insert(MAPDOCTEMP::value_type(TMACRO, pDocTemplate2)); 
	//////////////////////////////////////////////////////////////////////////////////

	// 주 MDI 프레임 창을 만듭니다.
	CMainFrame* pMainFrame = new CMainFrame;
	if (!pMainFrame || !pMainFrame->LoadFrame(IDR_MAINFRAME))
		return FALSE;
	m_pMainWnd = pMainFrame;
	// 접미사가 있을 경우에만 DragAcceptFiles를 호출합니다.
	// MDI 응용 프로그램에서는 m_pMainWnd를 설정한 후 바로 이러한 호출이 발생해야 합니다.
	// 표준 셸 명령, DDE, 파일 열기에 대한 명령줄을 구문 분석합니다.
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);

	if( cmdInfo.m_nShellCommand == CCommandLineInfo::FileNew ) // OnFileNew 실행안한다.
		cmdInfo.m_nShellCommand = CCommandLineInfo::FileNothing;

	// 명령줄에 지정된 명령을 디스패치합니다. 응용 프로그램이 /RegServer, /Register, /Unregserver 또는 /Unregister로 시작된 경우 FALSE를 반환합니다.
	if (!ProcessShellCommand(cmdInfo))
		return FALSE;
	// 주 창이 초기화되었으므로 이를 표시하고 업데이트합니다.	
	pMainFrame->ShowWindow(SW_SHOWMAXIMIZED); // 전체창크기
	pMainFrame->UpdateWindow();

	pDocTemplate2->OpenDocumentFile(NULL); // 파일을 연다.	
	pDocTemplate1->OpenDocumentFile(NULL); // 파일을 연다.

	return TRUE;
}



// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// 대화 상자 데이터
	enum { IDD = IDD_ABOUTBOX };

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원

// 구현
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
END_MESSAGE_MAP()

// 대화 상자를 실행하기 위한 응용 프로그램 명령입니다.
void CSvrTesterApp::OnAppAbout()
{
	CAboutDlg aboutDlg;
	aboutDlg.DoModal();
}

// CSvrTesterApp 메시지 처리기

// DocTemplate 리턴
CMultiDocTemplate* CSvrTesterApp::GetDocTemplate(int nPageID)
{
	MAPDOCTEMP::iterator finder = m_mapDocTemp.find(nPageID);
	return (*finder).second;
}

/////////////////////////////////////////////////////////////////////////////////////
// TSessionView / TSessionFrm Return
CTSessionView* CSvrTesterApp::GetTSessionView() 
{
    MAPDOCTEMP::iterator finder = m_mapDocTemp.find(0);
	POSITION pos = (*finder).second->GetFirstDocPosition();
	CDocument* pDoc = (*finder).second->GetNextDoc(pos);
	if(!pDoc) 
		return NULL;

	pos = pDoc->GetFirstViewPosition();
	CTSessionView* pView = (CTSessionView*)pDoc->GetNextView(pos);
	return pView;
}
CTSessionFrm* CSvrTesterApp::GetTSessionFrm() 
{    
	return pTSessionFrm;
}
/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// TMacroView / TMacroFrm Return
CTMacroView* CSvrTesterApp::GetTMacroView() 
{   
	MAPDOCTEMP::iterator finder = m_mapDocTemp.find(1);
	POSITION pos = (*finder).second->GetFirstDocPosition();
	CDocument* pDoc = (*finder).second->GetNextDoc(pos);
	if(!pDoc) 
		return NULL;

	pos = pDoc->GetFirstViewPosition();
	CTMacroView* pView = (CTMacroView*)pDoc->GetNextView(pos);
	return pView;	
}	
CTMacroFrm* CSvrTesterApp::GetTMacroFrm() 
{    
	return pTMacroFrm;
}
/////////////////////////////////////////////////////////////////////////////////////